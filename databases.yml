# https://towardsdatascience.com/getting-started-with-python-environments-using-conda-32e9f2779307
# http://www.leouieda.com/blog/conda-envs.html

# cd /path/to/this/file.yml
# conda env create -f databases.yml # OR "conda env update -f py368.yml" after installing Intel Python and activating
# conda activate databases.yml
# conda remove --name envName --all 
# conda create --name myclone --clone myenv
# conda create --name myenvname python=3.6

# The name of the environment matching the repository name
name: py37
# I prefer conda-forge packages for my projects
channels:
- conda-forge
- defaults
- intel
# Start with Python and include everything you need
dependencies:
- python=3.7
- mkl
- pip
- pyscaffold # to create a proper and standard-compliant Python package
- ipython
- py4j
- pytz
- pylint
- pyodbc
- sqlalchemy
# - flask-sqlalchemy #install manually after this script
- numpy
- scipy
- scikit-learn
- pandas
- xlrd # to read excel files
- openpyxl
- dask # parallelism at scale
- matplotlib # plots
- seaborn # visualization
- plotly
- dash
- dash-renderer
- dash-html-components
- dash-core-components
- bokeh
- scrapy # Web scrapping
# - pyspark #2.3.2 in Windows, 2.4.0 has issues in Windows 10 (Feb/2019)
# - spacy # Fastest python NLP
- lxml
- requests # URL/websites download
- pyarrow # for Apache parquet big tables
- cookiecutter # To create project templates (directory structures)
- jupyterlab
- django
# - pymongo=3.7.2
# - pygpu
# - theano
# - tensorflow-mkl # Neural networks # https://anaconda.org/intel/tensorflow
# - nltk
# - earthpy
# - geopandas
# - geopy
# - shapely
# - pyproj
# - utm
# - pandas_datareader
- pip:
  - tzlocal
  - ujson # fast json. https://pypi.org/project/ujson/
  - kafka-python
  - fastparquet # Alternative to SQLite3, but the later is better (less dependencies, similar size)
  - ipykernel
  - cufflinks
  - pybind11
  # - boost-py # Boost C++ library
  - Cython
  - xlrd # to read MS Excel files (.xlsx)
  # - MeshPy
  # - pygmsh # https://github.com/nschloe/pygmsh
  # - gmsh-interop
  # - meshio # pip only
  # - PyMetis
  # - pyamg # Algebraic Multi-Grid solvers   https://github.com/pyamg/pyamg
  # - xgboost # optimized distributed gradient boosting library. The same code runs on major distributed environment (Hadoop, SGE, MPI
  # - opencv-contrib-python # Computer Vision library
  - Flask # Web development (server side)
  - PyMySQL # https://pypi.org/project/PyMySQL/
  - mysql-connector-python
  - zeep # SOAP client
  - redis # https://pypi.org/project/redis/
  - elasticsearch # database, indexing, and searching
  - elasticsearch_dsl
  - flask-marshmallow # https://flask-marshmallow.readthedocs.io/en/latest/
  - flask-sqlalchemy
  - marshmallow-sqlalchemy
  - beautifulsoup4 # web scraping
  - line_profiler # To detect bottlenecks in performance (computing time)
  - graphviz # graph ploting
  - python-graphviz
  - pydeps # module dependencies export to .svg interactive image
  - pycallgraph2 #  call graph visualizations
  - pyan3 #  call graph visualizations
  - pydotplus # graphviz. https://riptutorial.com/python/example/29348/pydotplus
  - selenium # web navigation automation 
  - asyncpushbullet # To send notifications/files/msgs to Pushbullet.com (android, ios, web browsers, windows). I used to inform when a script is finished running
  - pushbullet-cli
  - pushbullet.py # Easier API to Pushbullet.com
  - html-table-extractor # For Web scraping
  # - intel::tensorflow # Neural networks # https://anaconda.org/intel/tensorflow
  # - keras # ==2.2.4 # Tensorflow API
  - jupyter
  - sos
  - sos-notebook
  - datacompy # To compare 2 pandas.DataFrame's or Spark.DataFrame's
#   - lasio # geophysical well logs .LAS import/export 
#   - welly # well log interpretation
#   - vtk
#   - shapely[vectorized]  # https://github.com/Toblerity/Shapely
#   - sympy
# ## Polygloth programming. R data science. 
#   - rpy2
  # - pip install geo_frac_analysis # https://github.com/TerminusEst/geo_frac_analysis
  # - pip install porepy

  # - findspark
